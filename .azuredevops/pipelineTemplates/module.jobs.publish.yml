#########################################################
## PUBLISH PIPELINE                                    ##
#########################################################
##
## This pipeline template contains the logic to publish module data as
## - A build artifact and/or
## - As a new version to a given storage account and/or
## - As a new version as an UniversalPackage to a given artifact-feed
##
#########################################################

##---------------------------------------------##
## TEMPLATE PARAMETERS                         ##
##---------------------------------------------##
##
## By default it uses the variables specified in the below [parameters] section. However, you can overwrite these variables in the
##    referencing pipeline by providing the paramater explicitly.
##
## NOTE: If you don't need to overwrite a shared value, you can IGNORE this section
##
##   |==================================================================================================================================================================================================================|
##   | Parameter                       | Default Value                        | Description                                                                                         | Example                           |
##   |---------------------------------|--------------------------------------|-----------------------------------------------------------------------------------------------------|-----------------------------------|
##   | displayName                     | 'Publish module'                     | Name for the pipeline job                                                                           | 'Publish KeyVault'                |
##   | serviceConnection               | '$(serviceConnection)'               | The service connection that connects to Azure                                                       | 'demo-internal'                   |
##   | poolName                        | '$(poolName)'                        | You can provide either a [poolname] or [vmImage] to run the job on                                  | 'Custom Deployment Pool'          |
##   | vmImage                         | '$(vmImage)'                         | You can provide either a [poolname] or [vmImage] to run the job on                                  | 'ubuntu20.04'                     |
##   | defaultJobTimeoutInMinutes      | 120                                  | The timeout for the job in this pipeline                                                            | 120                               |
##   | versionOption                   | '$(versionOption)'                   | The mode to handle the version increments [major|minor|patch|custom].                               | 'patch'                           |
##   | moduleVersion                   | '$(moduleVersion)'                   | The version to enforce if [versionOption] is set to [custom]                                        | '1.0.0'                           |
##   | modulePath                      | '$(modulePath)'                      | The path to the module to deploy. E.g. [c:/KeyVault]                                                | 'c:/KeyVault'                     |
##   | templateSpecsRGName             | '$(templateSpecsRGName)'             | Required to publish to template spec. ResourceGroup of the template spec to publish to              | 'mgmt-rg'                         |
##   | templateSpecsRGLocation         | '$(templateSpecsRGLocation)'         | Required to publish to template spec. Location of the template spec resource group                  | 'West Europe'                     |
##   | templateSpecsDescription        | '$(templateSpecsDescription)'        | Required to publish to template spec. Description of the template spec to publish to                | 'IaCs module'                     |
##   | vstsFeedName                    | '$(vstsFeedName)'                    | Required to publish to a DevOps feed. Name to the feed to publish to.                               | 'modules'                         |
##   | vstsProject                     | '$(System.TeamProject)'              | Required to publish to a DevOps feed. Name of the project hosting the artifacts feed. May be empty. | 'iacs'                            |
##   | bicepRegistryName               | '$(bicepRegistryName)'               | Required to publish to the private bicep registry. Name of the hosting container registry           | 'adpsxxazacrx001'                 |
##   | bicepRegistryRGName             | '$(bicepRegistryRGName)'             | Required to publish to the private bicep registry. Resource group of the hosting container registry | 'artifacts-rg'                    |
##   | vstsOrganization                | '$(vstsOrganization)'                | Required to publish to a DevOps feed. Name of the organization hosting the artifacts feed.          | 'servicescode'                    |
##   | azurePowerShellVersion          | '$(azurePowerShellVersion)'          | Used for configuring the Azure PowerShell Version, one of the example values.                       | 'latestVersion' or 'OtherVersion' |
##   | preferredAzurePowerShellVersion | '$(preferredAzurePowerShellVersion)' | Used for configuring the Azure PowerShell Version, either an empty string or specific version.      | '4.4.0'                           |
##   |==================================================================================================================================================================================================================|
##
##---------------------------------------------##

parameters:
  # Pipeline-related parameters
  checkoutRepositories: ''
  displayName: 'Publish module'
  serviceConnection: '$(serviceConnection)'
  poolName: '$(poolName)'
  vmImage: '$(vmImage)'
  defaultJobTimeoutInMinutes: 120
  modulesRepository: '$(modulesRepository)'

  # Logic-related parameters
  ## Module-related
  versionOption: '$(versionOption)'
  moduleVersion: '$(moduleVersion)'
  modulePath: '$(modulePath)'

  ## TemplateSpec-related
  templateSpecsRGName: '$(templateSpecsRGName)'
  templateSpecsRGLocation: '$(templateSpecsRGLocation)'
  templateSpecsDescription: '$(templateSpecsDescription)'

  ## Artifact-Feed-related
  vstsFeedName: '$(vstsFeedName)'
  vstsProject: '$(System.TeamProject)'
  vstsOrganization: '$(vstsOrganization)'

  ## Private-Bicep-Registry-related
  bicepRegistryName: '$(bicepRegistryName)'
  bicepRegistryRGName: '$(bicepRegistryRGName)'

##---------------------------------------------##
## TEMPLATE LOGIC                              ##
##---------------------------------------------##
jobs:
  - job:
    displayName: ${{ parameters.displayName }}
    timeoutInMinutes: ${{ parameters.defaultJobTimeoutInMinutes }}
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: ${{ parameters.vmImage }}
      ${{ if ne(parameters.poolName, '') }}:
        name: ${{ parameters.poolName }}
    steps:
      # [Checkout Repositories] task(s)
      #--------------------------------
      - checkout: self
      - ${{ if ne(parameters.checkoutRepositories, '') }}:
          - ${{ each checkoutRepository in parameters.checkoutRepositories }}:
              - checkout: ${{ checkoutRepository }}
                fetchDepth: 1 # the depth of commits to ask Git to fetch; if not set defaults to no limit
                path: 's/${{ checkoutRepository }}'

      # [Agent] Prepare environment
      #----------------------------
      - task: PowerShell@2
        displayName: 'Setup agent'
        inputs:
          targetType: inline
          pwsh: true
          script: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

            # Set agent up
            Set-EnvironmentOnAgent

      # [Multi Repo] Support task
      #--------------------------
      - task: PowerShell@2
        displayName: Handle Multi-Repo Invocation
        inputs:
          targetType: inline
          pwsh: true
          script: |
            # ---------------------------- #
            # HANDLE MULTI-REPO INVOCATION #
            # ---------------------------- #

            # Handle multiple-repositories
            if( "${{ join(';',parameters.checkoutRepositories) }}".length -gt 0) {
              Write-Verbose "Multi-Repo Checkout" -Verbose
              $modulePath = Join-Path '$(System.DefaultWorkingDirectory)' '$(modulesRepository)' '${{ parameters.modulePath }}'
            } else {
              Write-Verbose "No Multi-Repo Checkout" -Verbose
              $modulePath = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.modulePath }}'
            }
            Write-Host "##vso[task.setvariable variable=ENVMODULEPATH]$modulePath"

      # [Universal Artifact-feed publish] task(s)
      #------------------------------------------
      - powershell: |
          # Load used functions
          . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourcePublish' 'Initialize-UniversalArtifactPublish.ps1')

          $functionInput = @{
            templateFilePath = Join-Path '$(ENVMODULEPATH)' 'deploy.bicep'
            vstsOrganization = '${{ parameters.vstsOrganization }}'
            vstsProject      = '${{ parameters.vstsProject }}'
            vstsFeedName     = '${{ parameters.vstsFeedName }}'
            customVersion    = '${{ parameters.customVersion }}'
            versioningOption = '${{ parameters.versioningOption }}'
          }

          Write-Verbose "Invoke task with" -Verbose
          Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

          $output = Initialize-UniversalArtifactPublish @functionInput -Verbose

          # Write output value(s) into pipeline environment
          $output.Keys | ForEach-Object {
            Write-Host ("Publishing variable [{0}] with value [{1}] to pipeline environment" -f $_, $output[$_])
            Write-Host ("##vso[task.setVariable variable={0}]{1}" -f $_, $output[$_])
          }
        displayName: 'Prepare publish to artifacts feed'
        condition: and(
          eq(variables['artifactsFeedDoPublish'], true),
          succeeded()
          )
        enabled: true
        env:
          TOKEN: $(system.accesstoken)

      - task: UniversalPackages@0
        condition: and(
          eq(variables['artifactsFeedDoPublish'], true),
          succeeded()
          )
        displayName: Publish Universal Package
        inputs:
          command: publish
          publishDirectory: '$(ENVMODULEPATH)'
          ${{ if eq(parameters.vstsProject, '') }}:
            vstsFeedPublish: '${{ parameters.vstsFeedName }}'
          ${{ if ne(parameters.vstsProject, '') }}:
            vstsFeedPublish: '${{ parameters.vstsProject }}/${{ parameters.vstsFeedName }}'
          vstsFeedPackagePublish: '$(universalPackageModuleName)' # Published via [Initialize-UniversalArtifactPublish] invocation
          versionOption: '$(publishingMode)' # Published via [Initialize-UniversalArtifactPublish] invocation
          versionPublish: '$(newVersionObject)' # Published via [Initialize-UniversalArtifactPublish] invocation
          packagePublishDescription: '$(universalPackageModuleName) Module'
          verbosity: 'error'
        enabled: true

      # [template-spec publish] task(s)
      #--------------------------------
      - task: AzurePowerShell@5
        displayName: 'Publish module to template specs'
        condition: and(
          eq(variables['templateSpecsDoPublish'], true),
          succeeded()
          )
        enabled: true
        inputs:
          azureSubscription: '${{ parameters.serviceConnection }}'
          azurePowerShellVersion: ${{ parameters.azurePowerShellVersion }}
          preferredAzurePowerShellVersion: ${{ parameters.preferredAzurePowerShellVersion }}
          pwsh: true
          ScriptType: InlineScript
          inline: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourcePublish' 'Publish-ModuleToTemplateSpec.ps1')

            $functionInput = @{
              templateFilePath         = Join-Path '$(ENVMODULEPATH)' 'deploy.bicep'
              templateSpecsRgName      = '${{ parameters.templateSpecsRgName }}'
              templateSpecsRgLocation  = '${{ parameters.templateSpecsRgLocation }}'
              templateSpecsDescription = '${{ parameters.templateSpecsDescription }}'
              customVersion            = '${{ parameters.customVersion }}'
              versioningOption         = '${{ parameters.versioningOption }}'
            }

            Write-Verbose "Invoke task with" -Verbose
            Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

            Publish-ModuleToTemplateSpec @functionInput -Verbose

      # [private bicep registry publish] task(s)
      #-------------------------------------------
      - task: AzurePowerShell@5
        displayName: 'Publish module to private bicep registry'
        condition: and(
          eq(variables['bicepRegistryDoPublish'], true),
          succeeded()
          )
        enabled: true
        inputs:
          azureSubscription: '${{ parameters.serviceConnection }}'
          azurePowerShellVersion: ${{ parameters.azurePowerShellVersion }}
          preferredAzurePowerShellVersion: ${{ parameters.preferredAzurePowerShellVersion }}
          pwsh: true
          ScriptType: InlineScript
          inline: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourcePublish' 'Publish-ModuleToPrivateBicepRegistry.ps1')

            $functionInput = @{
              templateFilePath    = Join-Path '$(ENVMODULEPATH)' 'deploy.bicep'
              bicepRegistryName   = '${{ parameters.bicepRegistryName }}'
              bicepRegistryRgName = '${{ parameters.bicepRegistryRgName }}'
              customVersion       = '${{ parameters.customVersion }}'
              versioningOption    = '${{ parameters.versioningOption }}'
            }

            Write-Verbose "Invoke task with" -Verbose
            Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

            Publish-ModuleToPrivateBicepRegistry @functionInput -Verbose
